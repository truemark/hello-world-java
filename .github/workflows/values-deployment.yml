name: ArgoCD Deployment

on:
  workflow_run:
    workflows:
      - Values Only Deployment
    types:
      - completed

permissions:
  id-token: write
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ env.ENVIRONMENT }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: environment-and-files

      - name: Load Environment Variables
        run: |
          ENVIRONMENT=$(cat environment.txt)
          UPDATED_FILES=$(cat updated_files.txt)
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          echo "UPDATED_FILES=$UPDATED_FILES" >> $GITHUB_ENV

      - name: Print Variables
        run: |
          echo "Environment: $ENVIRONMENT"
          echo "Updated files: $UPDATED_FILES"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.aws_assume_role }}
          aws-region: us-east-2

      - name: EKS cluster login
        run: |
          aws eks update-kubeconfig --region us-east-2 --name ${{ vars.CLUSTER_NAME }}

      - name: Install kubectl and yq
        uses: truemark/kubectl-action@converting-to-typescript
        with:
          kubectl-enabled: true

      - name: Poll application status
        env:
          APP_NAME: hello-world
        run: |
          echo "Polling application status for $APP_NAME..."
          INITIAL_CHECK_DONE=false
          MAX_ATTEMPTS=30
          ATTEMPT=0
          while [[ $ATTEMPT -lt $MAX_ATTEMPTS ]]; do
            STATUS=$(kubectl get -n argocd application/$APP_NAME -o jsonpath='{.status.sync.status}')
            HEALTH=$(kubectl get -n argocd application/$APP_NAME -o jsonpath='{.status.health.status}')
            echo "$(date): Sync status: $STATUS, Health status: $HEALTH"
            if [[ "$INITIAL_CHECK_DONE" == "false" ]]; then
              if [[ "$STATUS" != "Synced" || "$HEALTH" != "Healthy" ]]; then
                INITIAL_CHECK_DONE=true
              fi
            else
              if [[ "$STATUS" == "Synced" && "$HEALTH" == "Healthy" ]]; then
                echo "Application $APP_NAME successfully synced and healthy."
                break
              fi
            fi
            ATTEMPT=$((ATTEMPT + 1))
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS complete. Retrying in 10 seconds..."
            sleep 10
          done
          if [[ $ATTEMPT -ge $MAX_ATTEMPTS ]]; then
            echo "Reached maximum attempts ($MAX_ATTEMPTS). Exiting with failure."
            exit 1
          fi
          kubectl get -n argocd events --field-selector involvedObject.name=$APP_NAME --sort-by='.metadata.creationTimestamp' -o wide | tail -n 5

name: Values Only Deployment

on:
  workflow_call:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        type: string
      updated_file:
        description: "Path to the updated file"
        required: true
        type: string
      app_name:
        description: "Name of the application"
        required: true
        type: string
      cluster:
        description: "Name of the EKS cluster"
        required: true
        type: string

permissions:
  id-token: write
  contents: write

jobs:
  values-update:
    runs-on: ubuntu-latest
    steps:

      - name: Install Kubectl and YQ
        uses: truemark/kubectl-action@converting-to-typescript
        with:
          yq-enabled: true
          kubectl-enabled: true

      - name: Generate token
        id: app-token
        uses: getsentry/action-github-app-token@v3
        with:
          app_id: ${{ secrets.RELEASE_BOT_ID }}
          private_key: ${{ secrets.RELEASE_BOT_KEY }}

      - name: Checkout Deployment Repo
        uses: actions/checkout@v4
        with:
          repository: truemark/k8s-deployments
          token: ${{ steps.app-token.outputs.token }}
          path: k8s-deployments

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: "${{ vars.AWS_ASSUME_ROLE_DEPLOY }}"
          aws-region: "us-east-2"

      - name: EKS Cluster Login
        run: |
          aws eks update-kubeconfig --region us-east-2 --name ${{ inputs.cluster }}

      - name: Copy Updates to Deployment Repo
        run: |
          cp $UPDATED_FILE k8s-deployments/environments/${{ inputs.ENVIRONMENT }}/${{ inputs.APP_NAME }}/
          cd k8s-deployments
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add environments/${{ inputs.ENVIRONMENT }}/${{ inputs.APP_NAME }}/$(basename ${{ inputs.updated_file }})
          git commit -m "Update deployment values for ${{ inputs.ENVIRONMENT }} from ${{ inputs.UPDATED_FILE }}"
          git push origin main

      - name: Poll App Status
        env:
          APP_NAME: ${{ inputs.APP_NAME }}
        run: |
          echo "Polling application status for $APP_NAME..."
          
          INITIAL_CHECK_DONE=false
          MAX_ATTEMPTS=30
          ATTEMPT=0
          
          while [[ $ATTEMPT -lt $MAX_ATTEMPTS ]]; do
          STATUS=$(kubectl get -n argocd application/$APP_NAME -o jsonpath='{.status.sync.status}')
          HEALTH=$(kubectl get -n argocd application/$APP_NAME -o jsonpath='{.status.health.status}')
          echo "$(date): Sync status: $STATUS, Health status: $HEALTH"
          
          # Ignore the initial Healthy/Synced state
          if [[ "$INITIAL_CHECK_DONE" == "false" ]]; then
          echo "Ignoring initial status: Sync=$STATUS, Health=$HEALTH"
          if [[ "$STATUS" != "Synced" || "$HEALTH" != "Healthy" ]]; then
          INITIAL_CHECK_DONE=true
          fi
          else
          # Check for successful sync and healthy state
          if [[ "$STATUS" == "Synced" && "$HEALTH" == "Healthy" ]]; then
          echo "Application $APP_NAME successfully synced and healthy."
          break
          fi
          fi
          
          # Increment the attempt counter
          ATTEMPT=$((ATTEMPT + 1))
          echo "Attempt $ATTEMPT/$MAX_ATTEMPTS complete. Retrying in 10 seconds..."
          
          # Wait for 10 seconds before polling again
          sleep 10
          done
          
          if [[ $ATTEMPT -ge $MAX_ATTEMPTS ]]; then
          echo "Reached maximum attempts ($MAX_ATTEMPTS). Exiting with failure."
          exit 1
          fi
          
          echo "Recent events for $APP_NAME:"
          kubectl get -n argocd events --field-selector involvedObject.name=$APP_NAME --sort-by='.metadata.creationTimestamp' -o wide | tail -n 5

name: Values Only Deployment

on:
  push:
    paths:
      - 'k8s/values/**'
  workflow_dispatch:

permissions:
  id-token: write
  contents: write

jobs:
  values-update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Environment Variable
        run: |
          UPDATED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          echo "Updated files: $UPDATED_FILES"

          if echo "$UPDATED_FILES" | grep -q "k8s/values/prod.yaml"; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
            echo "UPDATED_FILE=k8s/values/prod.yaml" >> $GITHUB_ENV
          elif echo "$UPDATED_FILES" | grep -q "k8s/values/stage.yaml"; then
            echo "ENVIRONMENT=stage" >> $GITHUB_ENV
            echo "UPDATED_FILE=k8s/values/stage.yaml" >> $GITHUB_ENV
          elif echo "$UPDATED_FILES" | grep -q "k8s/values/values.yaml"; then
            echo "ENVIRONMENT=shared" >> $GITHUB_ENV
            echo "UPDATED_FILE=k8s/values/values.yaml" >> $GITHUB_ENV
          else
            echo "No matching environment file found"
            exit 1
          fi
          echo "APP_NAME=hello-world" >> $GITHUB_ENV

      - name: Install Kubectl and YQ
        uses: truemark/kubectl-action@converting-to-typescript
        with:
          yq-enabled: true
          kubectl-enabled: true

      - name: Generate token
        id: app-token
        uses: getsentry/action-github-app-token@v3
        with:
          app_id: ${{ secrets.app-id }}
          private_key: ${{ secrets.private-key }}

      - name: Checkout Deployment Repo
        uses: actions/checkout@v4
        with:
          repository: truemark/k8s-deployments
          token: ${{ steps.app-token.outputs.token }}
          path: k8s-deployments

      - name: EKS Cluster Login
        run: |
          aws eks update-kubeconfig --region us-east-2 --name ${{ vars.CLUSTER_NAME }}

      - name: Copy Updates to Deployment Repo
        env:
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
          UPDATED_FILE: ${{ env.UPDATED_FILE }}
          APP_NAME: ${{ env.APP_NAME }}
        run: |
          cp $UPDATED_FILE k8s-deployments/environments/${ENVIRONMENT}/${APP_NAME}/
          cd k8s-deployments
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add environments/${ENVIRONMENT}/${APP_NAME}/$(basename $UPDATED_FILE)
          git commit -m "Update deployment values for $ENVIRONMENT from ${UPDATED_FILE}"
          git push origin main

      - name: Poll App Status
        env:
          APP_NAME: ${{ env.APP_NAME }}
        run: |
          echo "Polling application status for $APP_NAME..."
          
          INITIAL_CHECK_DONE=false
          MAX_ATTEMPTS=30
          ATTEMPT=0
          
          while [[ $ATTEMPT -lt $MAX_ATTEMPTS ]]; do
          STATUS=$(kubectl get -n argocd application/$APP_NAME -o jsonpath='{.status.sync.status}')
          HEALTH=$(kubectl get -n argocd application/$APP_NAME -o jsonpath='{.status.health.status}')
          echo "$(date): Sync status: $STATUS, Health status: $HEALTH"
          
          # Ignore the initial Healthy/Synced state
          if [[ "$INITIAL_CHECK_DONE" == "false" ]]; then
          echo "Ignoring initial status: Sync=$STATUS, Health=$HEALTH"
          if [[ "$STATUS" != "Synced" || "$HEALTH" != "Healthy" ]]; then
          INITIAL_CHECK_DONE=true
          fi
          else
          # Check for successful sync and healthy state
          if [[ "$STATUS" == "Synced" && "$HEALTH" == "Healthy" ]]; then
          echo "Application $APP_NAME successfully synced and healthy."
          break
          fi
          fi
          
          # Increment the attempt counter
          ATTEMPT=$((ATTEMPT + 1))
          echo "Attempt $ATTEMPT/$MAX_ATTEMPTS complete. Retrying in 10 seconds..."
          
          # Wait for 10 seconds before polling again
          sleep 10
          done
          
          if [[ $ATTEMPT -ge $MAX_ATTEMPTS ]]; then
          echo "Reached maximum attempts ($MAX_ATTEMPTS). Exiting with failure."
          exit 1
          fi
          
          echo "Recent events for $APP_NAME:"
          kubectl get -n argocd events --field-selector involvedObject.name=$APP_NAME --sort-by='.metadata.creationTimestamp' -o wide | tail -n 5
